@page "/dialog"
@inject DialogService DialogService
@implements IDisposable

<div class="container-fluid">
    <div class="row">
        <div class="col-md-4 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Inline Dialog: @orderID</RadzenText>
                <RadzenButton Text="Dialog with inline Blazor content" Style="width: 100%;" ButtonStyle="ButtonStyle.Secondary" Click=@ShowInlineDialog />
            </RadzenCard>
        </div>
        <div class="col-md-4 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Busy Dialog with a string message</RadzenText>
                <RadzenButton Text="Busy dialog" Style="width: 100%;" ButtonStyle="ButtonStyle.Secondary" Click=@(args => ShowBusyDialog(true)) />
            </RadzenCard>
        </div>
        <div class="col-md-4 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Busy Dialog with markup</RadzenText>
                <RadzenButton Text="Busy dialog" Style="width: 100%;" ButtonStyle="ButtonStyle.Secondary" Click=@(args => ShowBusyDialog(false)) />
            </RadzenCard>
        </div>
        <div class="col-md-4 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Confirm Dialog</RadzenText>
                <RadzenButton Text="Confirm dialog" Style="width: 100%;" ButtonStyle="ButtonStyle.Secondary" Click=@(args => DialogService.Confirm("Are you sure?", "MyTitle", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" })) />
            </RadzenCard>
        </div>
        <div class="col-md-4 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Alert Dialog</RadzenText>
                <RadzenButton Text="Alert dialog" Style="width: 100%;" ButtonStyle="ButtonStyle.Secondary" Click=@(args => DialogService.Alert("Some message!", "MyTitle", new AlertOptions() { OkButtonText = "Yes" })) />
            </RadzenCard>
        </div>
        <div class="col-md-4 p-3">
            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Close Dialog by clicking outside</RadzenText>
                <RadzenButton Text="Dialog with clickable overlay" Style="width: 100%;" ButtonStyle="ButtonStyle.Secondary" Click=@ShowCloseableFromOverlayDialog />
            </RadzenCard>
        </div>
    </div>
</div>

@code {
    int orderID = 10248;

    protected override void OnInitialized()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;
    }

    public void Dispose()
    {
        // The DialogService is a singleton so it is advisable to unsubscribe.
        DialogService.OnOpen -= Open;
        DialogService.OnClose -= Close;
    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        // console.Log("Dialog opened");
    }

    void Close(dynamic result)
    {
        // console.Log($"Dialog closed");
    }

    async Task ShowInlineDialog()
    {
     var result = await DialogService.OpenAsync("Simple Dialog", ds =>
        @<div>
            <p class="mb-4">Confirm Order ID <b>@orderID</b>?</p>
            <div class="row">
                <div class="col">
                    <RadzenButton Text="Ok" Click="() => ds.Close(true)" Class="me-1" Style="width: 80px;" />
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" Class="me-1" />
                    <RadzenButton Text="Refresh" Click="(() => { orderID = 10250; ds.Refresh(); })" ButtonStyle="ButtonStyle.Light"  Class="me-1 float-end" />

                </div>
            </div>
        </div>);

      // console.Log($"Dialog result: {result}");
    }

    async Task ShowCloseableFromOverlayDialog()
    {
     await DialogService.OpenAsync("Closeable from overlay Dialog", ds =>
        @<div>
            Click outside to close this Dialog
        </div>, new DialogOptions() { CloseDialogOnOverlayClick = true });
    }

    async Task ShowBusyDialog(bool withMessageAsString)
    {
        await InvokeAsync(async () =>
        {
            // Simulate background task
            await Task.Delay(2000);

            // Close the dialog
            DialogService.Close();
        });

        if (withMessageAsString)
        {
            await BusyDialog("Busy ...");
        }
        else
        {
            await BusyDialog();
        }
    }

    // Busy dialog from markup
    async Task BusyDialog()
    {
        await DialogService.OpenAsync("", ds =>
            @<div>
                <div class="row">
                    <div class="col text-center p-5">
                        <RadzenImage Path="images/community.svg" Style="display: block; width: 200px; margin-bottom: 40px;" />
                        <b>Loading, please wait...</b>
                    </div>
                </div>
        </div>, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }

    // Busy dialog from string
    async Task BusyDialog(string message)
    {
        await DialogService.OpenAsync("", ds =>
        {
            RenderFragment content = b =>
            {
                b.OpenElement(0, "div");
                b.AddAttribute(1, "class", "row");

                b.OpenElement(2, "div");
                b.AddAttribute(3, "class", "col-md-12");

                b.AddContent(4, message);

                b.CloseElement();
                b.CloseElement();
            };
            return content;
        }, new DialogOptions() { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }
}