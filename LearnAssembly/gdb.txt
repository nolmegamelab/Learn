No line number information available.
No symbol table is loaded.  Use the "file" command.
No line number information available.
4711The current source language is "auto; currently c".
GNU gdb (Ubuntu 9.1-0ubuntu1) 9.1
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word".
Working directory /mnt/c/nolme/Learn/LearnAssembly.
No breakpoints or watchpoints.
The filename in which to record the command history is "/mnt/c/nolme/Learn/LearnAssembly/.gdb_history".
The size of the command history is 256.
No current source file.
No symbol table is loaded.  Use the "file" command.
No symbol table is loaded.  Use the "file" command.
No current source file.
No symbol table is loaded.  Use the "file" command.
No symbol table is loaded.  Use the "file" command.
The program being debugged is not being run.
No symbol table is loaded.  Use the "file" command.
No current source file.
No symbol table is loaded.  Use the "file" command.
No current source file.
No symbol table is loaded.  Use the "file" command.
No current source file.
No symbol table is loaded.  Use the "file" command.
No current source file.
No symbol table is loaded.  Use the "file" command.
No current source file.
No symbol table is loaded.  Use the "file" command.
No current source file.
No symbol table is loaded.  Use the "file" command.
No current source file.
No symbol table is loaded.  Use the "file" command.
No current source file.
No symbol table is loaded.  Use the "file" command.
No current source file.
No symbol table is loaded.  Use the "file" command.
No current source file.
No symbol table is loaded.  Use the "file" command.
No breakpoints or watchpoints.
No current source file.
No breakpoints or watchpoints.
There are no auto-display expressions now.
No current source file.
The program being debugged is not being run.
Detach a process or file previously attached.
If a process, it is no longer traced, and it continues its execution.  If
you were debugging a file, the file is closed and gdb no longer accesses it.

List of detach subcommands:

detach checkpoint -- Detach from a checkpoint (experimental).
detach inferiors -- Detach from inferior ID (or list of IDS).

Type "help detach" followed by detach subcommand name for full documentation.
Type "apropos word" to search for commands related to "word".
Type "apropos -v word" for full documentation of commands related to "word".
Command name abbreviations are allowed if unambiguous.
Start debugged program.
You may specify arguments to give it.
Args may include "*", or "[...]"; they are expanded using the
shell that will start the program (specified by the "$SHELL" environment
variable).  Input and output redirection with ">", "<", or ">>"
are also allowed.

With no arguments, uses arguments last specified (with "run" or 
"set args").  To cancel previous arguments and run with no arguments,
use "set args" without arguments.

To start the inferior without using a shell, use "set startup-with-shell off".
Step program until it reaches a different source line.
Usage: step [N]
Argument N means step N times (or till program stops for another reason).
Step one instruction exactly.
Usage: stepi [N]
Argument N means step N times (or till program stops for another reason).
Step program, proceeding through subroutine calls.
Usage: next [N]
Unlike "step", if the current source line calls a subroutine,
this command does not enter the subroutine, but instead steps over
the call, in effect treating it as a single source line.
Step one instruction, but proceed through subroutine calls.
Usage: nexti [N]
Argument N means step N times (or till program stops for another reason).
Execute until past the current line or past a LOCATION.
Execute until the program reaches a source line greater than the current
or a specified location (same args as break command) within the current frame.
Execute until selected stack frame returns.
Usage: finish
Upon return, the value returned is printed and put in the value history.
Continue program being debugged, after signal or breakpoint.
Usage: continue [N]
If proceeding from breakpoint, a number N may be used as an argument,
which means to set the ignore count of that breakpoint to N - 1 (so that
the breakpoint won't break until the Nth time it is reached).

If non-stop mode is enabled, continue only the current thread,
otherwise all the threads in the program are continued.  To 
continue all stopped threads in non-stop mode, use the -a option.
Specifying -a and an ignore count simultaneously is an error.
Continue program with the specified signal.
Usage: signal SIGNAL
The SIGNAL argument is processed the same as the handle command.

An argument of "0" means continue the program without sending it a signal.
This is useful in cases where the program stopped because of a signal,
and you want to resume the program while discarding the signal.

In a multi-threaded program the signal is delivered to, or discarded from,
the current thread only.
Kill execution of program being debugged.

List of kill subcommands:

kill inferiors -- Kill inferior ID (or list of IDs).

Type "help kill" followed by kill subcommand name for full documentation.
Type "apropos word" to search for commands related to "word".
Type "apropos -v word" for full documentation of commands related to "word".
Command name abbreviations are allowed if unambiguous.
Select and print stack frame that called this one.
An argument says how many frames up to go.
Select and print stack frame called by this one.
An argument says how many frames down to go.
Reading symbols from first_example...
No line number information available.
1	section .data
2	
3	EXIT_STATUS 	equ 	0 
4	SYS_exit 	equ 	60 
5	
6	;---- 
7	
8	bVar1 		db 	17 
9	bVar2		db 	9 
10	bResult 	db 	0 
Line 10 of "first_example.asm" is at address 0x401000 <_start> but contains no code.
/mnt/c/nolme/Learn/LearnAssembly/first_example.asm:10:94:beg:0x401000
4711The current source language is "auto; currently c".
GNU gdb (Ubuntu 9.1-0ubuntu1) 9.1
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word".
Working directory /mnt/c/nolme/Learn/LearnAssembly.
No breakpoints or watchpoints.
The filename in which to record the command history is "/mnt/c/nolme/Learn/LearnAssembly/.gdb_history".
The size of the command history is 256.
   0x401000 <_start>:	mov    0x402000,%al
   0x401100:	Cannot access memory at address 0x401100
Dump of assembler code for function _start:
   0x0000000000401000 <+0>:	mov    0x402000,%al
   0x0000000000401007 <+7>:	add    0x402001,%al
   0x000000000040100e <+14>:	mov    %al,0x402002
   0x0000000000401015 <+21>:	mov    0x402003,%ax
   0x000000000040101d <+29>:	add    0x402005,%ax
   0x0000000000401025 <+37>:	mov    %ax,0x402007
   0x000000000040102d <+45>:	mov    0x402009,%eax
   0x0000000000401034 <+52>:	add    0x40200d,%eax
   0x000000000040103b <+59>:	mov    %eax,0x402011
   0x0000000000401042 <+66>:	mov    0x402015,%rax
   0x000000000040104a <+74>:	add    0x40201d,%rax
   0x0000000000401052 <+82>:	mov    %rax,0x402025
End of assembler dump.
Current source file is first_example.asm
Compilation directory is /mnt/c/nolme/Learn/LearnAssembly/
Located in /mnt/c/nolme/Learn/LearnAssembly/first_example.asm
Contains 50 lines.
Source language is asm.
Producer is yasm 1.3.0.
Compiled with DWARF 2 debugging format.
Does not include preprocessor macro info.
Symbols from "/mnt/c/nolme/Learn/LearnAssembly/first_example".
Local exec file:
	`/mnt/c/nolme/Learn/LearnAssembly/first_example', file type elf64-x86-64.
	Entry point: 0x401000
	0x0000000000401000 - 0x000000000040106a is .text
	0x0000000000402000 - 0x000000000040202d is .data
The program being debugged is not being run.
No breakpoints or watchpoints.
No breakpoints or watchpoints.
There are no auto-display expressions now.
Symbols from "/mnt/c/nolme/Learn/LearnAssembly/first_example".
Local exec file:
	`/mnt/c/nolme/Learn/LearnAssembly/first_example', file type elf64-x86-64.
	Entry point: 0x401000
	0x0000000000401000 - 0x000000000040106a is .text
	0x0000000000402000 - 0x000000000040202d is .data
The program being debugged is not being run.
Detach a process or file previously attached.
If a process, it is no longer traced, and it continues its execution.  If
you were debugging a file, the file is closed and gdb no longer accesses it.

List of detach subcommands:

detach checkpoint -- Detach from a checkpoint (experimental).
detach inferiors -- Detach from inferior ID (or list of IDS).

Type "help detach" followed by detach subcommand name for full documentation.
Type "apropos word" to search for commands related to "word".
Type "apropos -v word" for full documentation of commands related to "word".
Command name abbreviations are allowed if unambiguous.
Start debugged program.
You may specify arguments to give it.
Args may include "*", or "[...]"; they are expanded using the
shell that will start the program (specified by the "$SHELL" environment
variable).  Input and output redirection with ">", "<", or ">>"
are also allowed.

With no arguments, uses arguments last specified (with "run" or 
"set args").  To cancel previous arguments and run with no arguments,
use "set args" without arguments.

To start the inferior without using a shell, use "set startup-with-shell off".
Step program until it reaches a different source line.
Usage: step [N]
Argument N means step N times (or till program stops for another reason).
Step one instruction exactly.
Usage: stepi [N]
Argument N means step N times (or till program stops for another reason).
Step program, proceeding through subroutine calls.
Usage: next [N]
Unlike "step", if the current source line calls a subroutine,
this command does not enter the subroutine, but instead steps over
the call, in effect treating it as a single source line.
Step one instruction, but proceed through subroutine calls.
Usage: nexti [N]
Argument N means step N times (or till program stops for another reason).
Execute until past the current line or past a LOCATION.
Execute until the program reaches a source line greater than the current
or a specified location (same args as break command) within the current frame.
Execute until selected stack frame returns.
Usage: finish
Upon return, the value returned is printed and put in the value history.
Continue program being debugged, after signal or breakpoint.
Usage: continue [N]
If proceeding from breakpoint, a number N may be used as an argument,
which means to set the ignore count of that breakpoint to N - 1 (so that
the breakpoint won't break until the Nth time it is reached).

If non-stop mode is enabled, continue only the current thread,
otherwise all the threads in the program are continued.  To 
continue all stopped threads in non-stop mode, use the -a option.
Specifying -a and an ignore count simultaneously is an error.
Continue program with the specified signal.
Usage: signal SIGNAL
The SIGNAL argument is processed the same as the handle command.

An argument of "0" means continue the program without sending it a signal.
This is useful in cases where the program stopped because of a signal,
and you want to resume the program while discarding the signal.

In a multi-threaded program the signal is delivered to, or discarded from,
the current thread only.
Kill execution of program being debugged.

List of kill subcommands:

kill inferiors -- Kill inferior ID (or list of IDs).

Type "help kill" followed by kill subcommand name for full documentation.
Type "apropos word" to search for commands related to "word".
Type "apropos -v word" for full documentation of commands related to "word".
Command name abbreviations are allowed if unambiguous.
Select and print stack frame that called this one.
An argument says how many frames up to go.
Select and print stack frame called by this one.
An argument says how many frames down to go.
No symbol "text" in current context.
No symbol "data" in current context.
Function "main" not defined.
No breakpoints or watchpoints.
'dVar1' has unknown type; cast it to its declared type
'wVar1' has unknown type; cast it to its declared type
No symbol "al" in current context.
Reading symbols from first_example...
No line number information available.
1	section .data
2	
3	EXIT_STATUS 	equ 	0 
4	SYS_exit 	equ 	60 
5	
6	;---- 
7	
8	bVar1 		db 	17 
9	bVar2		db 	9 
10	bResult 	db 	0 
Line 10 of "first_example.asm" is at address 0x401000 <_start> but contains no code.
/mnt/c/nolme/Learn/LearnAssembly/first_example.asm:10:94:beg:0x401000
4711The current source language is "auto; currently c".
GNU gdb (Ubuntu 9.1-0ubuntu1) 9.1
Copyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word".
Working directory /mnt/c/nolme/Learn/LearnAssembly.
No breakpoints or watchpoints.
The filename in which to record the command history is "/mnt/c/nolme/Learn/LearnAssembly/.gdb_history".
The size of the command history is 256.
   0x401000 <_start>:	mov    0x402000,%al
   0x401100:	Cannot access memory at address 0x401100
Dump of assembler code for function _start:
   0x0000000000401000 <+0>:	mov    0x402000,%al
   0x0000000000401007 <+7>:	add    0x402001,%al
   0x000000000040100e <+14>:	mov    %al,0x402002
   0x0000000000401015 <+21>:	mov    0x402003,%ax
   0x000000000040101d <+29>:	add    0x402005,%ax
   0x0000000000401025 <+37>:	mov    %ax,0x402007
   0x000000000040102d <+45>:	mov    0x402009,%eax
   0x0000000000401034 <+52>:	add    0x40200d,%eax
   0x000000000040103b <+59>:	mov    %eax,0x402011
   0x0000000000401042 <+66>:	mov    0x402015,%rax
   0x000000000040104a <+74>:	add    0x40201d,%rax
   0x0000000000401052 <+82>:	mov    %rax,0x402025
End of assembler dump.
Current source file is first_example.asm
Compilation directory is /mnt/c/nolme/Learn/LearnAssembly/
Located in /mnt/c/nolme/Learn/LearnAssembly/first_example.asm
Contains 50 lines.
Source language is asm.
Producer is yasm 1.3.0.
Compiled with DWARF 2 debugging format.
Does not include preprocessor macro info.
Symbols from "/mnt/c/nolme/Learn/LearnAssembly/first_example".
Local exec file:
	`/mnt/c/nolme/Learn/LearnAssembly/first_example', file type elf64-x86-64.
	Entry point: 0x401000
	0x0000000000401000 - 0x000000000040106a is .text
	0x0000000000402000 - 0x000000000040202d is .data
The program being debugged is not being run.
No breakpoints or watchpoints.
No breakpoints or watchpoints.
There are no auto-display expressions now.
Symbols from "/mnt/c/nolme/Learn/LearnAssembly/first_example".
Local exec file:
	`/mnt/c/nolme/Learn/LearnAssembly/first_example', file type elf64-x86-64.
	Entry point: 0x401000
	0x0000000000401000 - 0x000000000040106a is .text
	0x0000000000402000 - 0x000000000040202d is .data
The program being debugged is not being run.
Detach a process or file previously attached.
If a process, it is no longer traced, and it continues its execution.  If
you were debugging a file, the file is closed and gdb no longer accesses it.

List of detach subcommands:

detach checkpoint -- Detach from a checkpoint (experimental).
detach inferiors -- Detach from inferior ID (or list of IDS).

Type "help detach" followed by detach subcommand name for full documentation.
Type "apropos word" to search for commands related to "word".
Type "apropos -v word" for full documentation of commands related to "word".
Command name abbreviations are allowed if unambiguous.
Start debugged program.
You may specify arguments to give it.
Args may include "*", or "[...]"; they are expanded using the
shell that will start the program (specified by the "$SHELL" environment
variable).  Input and output redirection with ">", "<", or ">>"
are also allowed.

With no arguments, uses arguments last specified (with "run" or 
"set args").  To cancel previous arguments and run with no arguments,
use "set args" without arguments.

To start the inferior without using a shell, use "set startup-with-shell off".
Step program until it reaches a different source line.
Usage: step [N]
Argument N means step N times (or till program stops for another reason).
Step one instruction exactly.
Usage: stepi [N]
Argument N means step N times (or till program stops for another reason).
Step program, proceeding through subroutine calls.
Usage: next [N]
Unlike "step", if the current source line calls a subroutine,
this command does not enter the subroutine, but instead steps over
the call, in effect treating it as a single source line.
Step one instruction, but proceed through subroutine calls.
Usage: nexti [N]
Argument N means step N times (or till program stops for another reason).
Execute until past the current line or past a LOCATION.
Execute until the program reaches a source line greater than the current
or a specified location (same args as break command) within the current frame.
Execute until selected stack frame returns.
Usage: finish
Upon return, the value returned is printed and put in the value history.
Continue program being debugged, after signal or breakpoint.
Usage: continue [N]
If proceeding from breakpoint, a number N may be used as an argument,
which means to set the ignore count of that breakpoint to N - 1 (so that
the breakpoint won't break until the Nth time it is reached).

If non-stop mode is enabled, continue only the current thread,
otherwise all the threads in the program are continued.  To 
continue all stopped threads in non-stop mode, use the -a option.
Specifying -a and an ignore count simultaneously is an error.
Continue program with the specified signal.
Usage: signal SIGNAL
The SIGNAL argument is processed the same as the handle command.

An argument of "0" means continue the program without sending it a signal.
This is useful in cases where the program stopped because of a signal,
and you want to resume the program while discarding the signal.

In a multi-threaded program the signal is delivered to, or discarded from,
the current thread only.
Kill execution of program being debugged.

List of kill subcommands:

kill inferiors -- Kill inferior ID (or list of IDs).

Type "help kill" followed by kill subcommand name for full documentation.
Type "apropos word" to search for commands related to "word".
Type "apropos -v word" for full documentation of commands related to "word".
Command name abbreviations are allowed if unambiguous.
Select and print stack frame that called this one.
An argument says how many frames up to go.
Select and print stack frame called by this one.
An argument says how many frames down to go.
No symbol "data" in current context.
User-defined commands.
The commands in this class are those defined by the user.
Use the "define" command to define a command.

List of commands:


Type "help" followed by command name for full documentation.
Type "apropos word" to search for commands related to "word".
Type "apropos -v word" for full documentation of commands related to "word".
Command name abbreviations are allowed if unambiguous.
No breakpoints or watchpoints.
Starting program: /mnt/c/nolme/Learn/LearnAssembly/first_example 
[Inferior 1 (process 13668) exited normally]
No breakpoints or watchpoints.
No symbol "rax" in current context.
'bVar2' has unknown type; cast it to its declared type
Breakpoint 1 at 0x0
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000000000 
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000000000 
Starting program: /mnt/c/nolme/Learn/LearnAssembly/first_example 
Warning:
Cannot insert breakpoint 1.
Cannot access memory at address 0x0

Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000000000 
   0x0:	Cannot access memory at address 0x0
   0x100:	Cannot access memory at address 0x100
Dump of assembler code from 0x0 to 0x100:
   0x0000000000000000:	Cannot access memory at address 0x0
